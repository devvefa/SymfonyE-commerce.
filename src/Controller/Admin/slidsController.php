<?php

namespace App\Controller\Admin;

use App\Entity\Admin\slids;
use App\Form\Admin\slidsType;
use App\Repository\Admin\slidsRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

/**
 * @Route("/admin/slids")
 */
class slidsController extends AbstractController
{
    /**
     * @Route("/", name="admin_slids_index", methods={"GET"})
     */
    public function index(slidsRepository $slidsRepository): Response
    {
        return $this->render('admin/slids/index.html.twig', [
            'slids' => $slidsRepository->findAll(),
        ]);
    }

    /**
     * @Route("/new", name="admin_slids_new", methods={"GET","POST"})
     */
    public function new(Request $request): Response
    {
        $slid = new slids();
        $form = $this->createForm(slidsType::class, $slid);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($slid);
            $entityManager->flush();

            return $this->redirectToRoute('admin_slids_index');
        }

        return $this->render('admin/slids/new.html.twig', [
            'slid' => $slid,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="admin_slids_show", methods={"GET"})
     */
    public function show(slids $slid): Response
    {
        return $this->render('admin/slids/show.html.twig', [
            'slid' => $slid,
        ]);
    }

    /**
     * @Route("/{id}/edit", name="admin_slids_edit", methods={"GET","POST"})
     */
    public function edit(Request $request, slids $slid): Response
    {
        $form = $this->createForm(slidsType::class, $slid);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('admin_slids_index');
        }

        return $this->render('admin/slids/edit.html.twig', [
            'slid' => $slid,
            'form' => $form->createView(),
        ]);
    }





    /**
     * @Route("/{id}/iedit", name="admin_slids_iedit", methods={"GET","POST"})
     */
    public function iedit(Request $request,$id, slids $slid): Response
    {
        $form = $this->createForm(slidsType::class, $slid);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->getDoctrine()->getManager()->flush();
            return $this->redirectToRoute('admin_slids_edit', [
                'id' => $slid->getId(),
            ]);
        }

        return $this->render('admin/slids/image_edit.html.twig', [
            'slid' => $slid,
            'form' => $form->createView(),
            'id' => $id,
        ]);
    }



    /**
     * @Route("/{id}", name="admin_slids_delete", methods={"DELETE"})
     */
    public function delete(Request $request, slids $slid): Response
    {
        if ($this->isCsrfTokenValid('delete'.$slid->getId(), $request->request->get('_token'))) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->remove($slid);
            $entityManager->flush();
        }

        return $this->redirectToRoute('admin_slids_index');
    }

    /**
     * @Route("/{id}/imgsdate", name="admin_slids_imgsdate",methods={"GET","POST"})
     */
    public function imgsdate(Request $request,$id,slids $slid): Response
    {
        $form = $this->createForm(slidsType::class, $slid);

        $form->handleRequest($request);
        $file = $request->files->get('slidname');
        $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

        try {
            $file->move(
                $this->getParameter('images_directory'),
                $fileName
            );
        } catch (FileException $e) {

        }

        $slid->setImgs($fileName);
        $this->getDoctrine()->getManager()->flush();

        return $this->redirectToRoute('admin_slid_iedit', [
            'id' => $slid->getId(),]);


    }





    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
// md5() reduces the similarity of the file names generated by
// uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}